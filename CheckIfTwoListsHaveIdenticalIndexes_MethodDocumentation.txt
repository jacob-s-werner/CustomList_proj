CheckIfTwoListsHaveIdenticalIndexes<T>(CustomList<T>, CustomList<T>) Method

Namespace: CustomListUnitTesting

Definition:
	

-------------------------------------------------------------------------------------------------------
C# syntax:
	public void CheckIfTwoListsHaveIdenticalIndexes<T>(CustomList<T> expected, CustomList<T> actual)
-------------------------------------------------------------------------------------------------------
Parameters:
	CustomList<T> expected
		The CustomList that subtracts values. The value can be null.
	CustomList<T> actual
		The CustomList that gets it's values subtracted. The value can be null.

Returns:
	CustomList<T>
		CustomList<T> returns the new subtracted List. 
		If customList2 is null it returns an unchanged copy of customList1.
		
Example:
	The following example demonstrates how to subtract one CustomList<T> from another. 
	Three CustomLists are created (listOne, listTwo, and result). The values 1, 1, and 5 are added to CustomList listOne.
	The values 2, 1, and 6 are added to CustomList listTwo. CustomList listOne has each of it's indexes scanned for a matching value with CustomList listTwo,
	if a match is found it removes that value. Since the first index 1 of listOne matches the second index 1 of listTwo, it is removed from the listOne. Because the value 1
	was already removed from the first index, it is not removed again (duplicates aren't removed unless listTwo also has duplicates).
	

		MinusOperatorOverloadMethodTests minusTests = new MinusOperatorOverloadMethodTests();
            	CustomList<int> customList1 = new CustomList<int>();
            	CustomList<int> customList2 = new CustomList<int>();

            	customList1.Add(1);
            	customList2.Add(1);
            	customList2.Add(1);
            	customList2.Add(1);

              	minusTests.CheckIfTwoListsHaveIdenticalIndexes(customList1, customList2);

Remarks: